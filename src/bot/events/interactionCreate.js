import { ticketData, io, getServerConfig } from '../index.js';

export default {
    name: 'interactionCreate',
    execute: async (interaction) => {
        if (interaction.isChatInputCommand()) {
            const command = interaction.client.commands.get(interaction.commandName);
            if (!command) return;

            try {
                await command.execute(interaction);
            } catch (error) {
                console.error('‚ùå Erreur lors de l\'ex√©cution de la commande:', error);
                const errorMessage = '‚ùå Une erreur est survenue lors de l\'ex√©cution de cette commande.';
                
                try {
                    if (interaction.replied || interaction.deferred) {
                        await interaction.followUp({ content: errorMessage, flags: 64 });
                    } else {
                        await interaction.reply({ content: errorMessage, flags: 64 });
                    }
                } catch (replyError) {
                    console.error('‚ùå Impossible de r√©pondre √† l\'interaction:', replyError);
                }
            }
        } else if (interaction.isButton()) {
            const { customId } = interaction;

            try {
                // V√©rifier si l'interaction a d√©j√† √©t√© trait√©e
                if (interaction.replied || interaction.deferred) {
                    console.warn('‚ö†Ô∏è Interaction d√©j√† trait√©e:', customId);
                    return;
                }

                console.log(`üîò Bouton cliqu√©: ${customId} par ${interaction.user.tag}`);

                // Protection anti-spam pour les boutons
                const userId = interaction.user.id;
                const now = Date.now();
                
                if (!global.buttonInteractionCache) {
                    global.buttonInteractionCache = new Map();
                }
                
                const buttonCacheKey = `${userId}_${customId}`;
                const lastInteraction = global.buttonInteractionCache.get(buttonCacheKey);
                
                if (lastInteraction && (now - lastInteraction) < 3000) {
                    console.warn(`‚ö†Ô∏è Interaction bouton ignor√©e (trop r√©cente): ${customId} par ${interaction.user.tag}`);
                    await interaction.deferReply({ ephemeral: true });
                    await interaction.editReply({
                        content: '‚ö†Ô∏è Veuillez patienter avant de cliquer √† nouveau.'
                    });
                    return;
                }
                
                global.buttonInteractionCache.set(buttonCacheKey, now);
                
                // Nettoyer le cache p√©riodiquement
                setTimeout(() => {
                    global.buttonInteractionCache.delete(buttonCacheKey);
                }, 5000);

                // D√©f√©rer l'interaction imm√©diatement selon le type de bouton
                const updateButtons = ['claim_ticket', 'close_ticket', 'reopen_ticket', 'delete_ticket'];
                if (updateButtons.includes(customId)) {
                    await interaction.deferUpdate();
                } else {
                    await interaction.deferReply({ ephemeral: true });
                }

                // Gestion des boutons de tickets depuis le panel Serko
                if (customId.startsWith('serko_ticket_')) {
                    const parts = customId.split('_');
                    const category = parts[2]; // serko_ticket_[category]_[id]
                    await interaction.client.createTicket(interaction, category);
                }
                // Gestion des boutons de tickets depuis le panel
                else if (customId.startsWith('panel_ticket_')) {
                    const category = customId.replace('panel_ticket_', '');
                    await interaction.client.createTicket(interaction, category);
                }
                // Gestion des boutons de configuration depuis le panel
                else if (customId === 'panel_config') {
                    await handlePanelConfig(interaction);
                }
                // Gestion des boutons de statistiques depuis le panel
                else if (customId === 'panel_stats') {
                    await handlePanelStats(interaction);
                }
                // Gestion du bouton d'aide
                else if (customId === 'panel_help') {
                    await handlePanelHelp(interaction);
                }
                // Boutons de configuration sp√©cifiques avec s√©lecteurs
                else if (customId.startsWith('config_select_')) {
                    await handleConfigSelect(interaction);
                }
                
                // Gestion des boutons de tickets existants
                else if (customId.startsWith('create_ticket_')) {
                    const category = customId.replace('create_ticket_', '');
                    await interaction.client.createTicket(interaction, category);
                } else if (customId === 'claim_ticket') {
                    await handleClaimTicket(interaction);
                } else if (customId === 'close_ticket') {
                    await handleCloseTicket(interaction);
                } else if (customId === 'reopen_ticket') {
                    await handleReopenTicket(interaction);
                } else if (customId === 'delete_ticket') {
                    await handleDeleteTicket(interaction);
                }
                
                // Gestion des boutons d'embed personnalis√©s
                else if (customId.startsWith('embed_')) {
                    await handleCustomEmbedButton(interaction);
                }
                
                // Gestion des boutons de panneaux pr√©d√©finis
                else if (customId.startsWith('admin_')) {
                    await handleAdminButton(interaction);
                } else if (customId.startsWith('info_')) {
                    await handleInfoButton(interaction);
                } else if (customId.startsWith('support_')) {
                    await handleSupportButton(interaction);
                } else if (customId.startsWith('role_')) {
                    await handleRoleButton(interaction);
                }
                // Bouton non reconnu
                else {
                    console.warn(`‚ö†Ô∏è Bouton non reconnu: ${customId}`);
                    await interaction.editReply({
                        content: '‚ùå Cette action n\'est pas reconnue.'
                    });
                }
            } catch (error) {
                console.error(`‚ùå Erreur lors du traitement du bouton ${customId}:`, error);
                
                try {
                    if (interaction.deferred && !interaction.replied) {
                        await interaction.editReply({
                            content: '‚ùå Une erreur est survenue lors du traitement de cette action.'
                        });
                    } else if (!interaction.replied && !interaction.deferred) {
                        await interaction.reply({
                            content: '‚ùå Une erreur est survenue lors du traitement de cette action.',
                            flags: 64
                        });
                    }
                } catch (replyError) {
                    console.error('‚ùå Impossible de r√©pondre √† l\'erreur d\'interaction:', replyError);
                }
            }
        } else if (interaction.isStringSelectMenu()) {
            try {
                // D√©f√©rer imm√©diatement pour les menus de s√©lection
                if (!interaction.replied && !interaction.deferred) {
                    await interaction.deferReply({ ephemeral: true });
                }

                // Gestion des menus de s√©lection pour la configuration
                if (interaction.customId.startsWith('config_select_')) {
                    await handleConfigSelection(interaction);
                }
            } catch (error) {
                console.error('‚ùå Erreur lors du traitement du menu de s√©lection:', error);
                
                try {
                    if (interaction.deferred && !interaction.replied) {
                        await interaction.editReply({
                            content: '‚ùå Une erreur est survenue lors du traitement de cette s√©lection.'
                        });
                    } else if (!interaction.replied && !interaction.deferred) {
                        await interaction.reply({
                            content: '‚ùå Une erreur est survenue lors du traitement de cette s√©lection.',
                            flags: 64
                        });
                    }
                } catch (replyError) {
                    console.error('‚ùå Impossible de r√©pondre √† l\'erreur de s√©lection:', replyError);
                }
            }
        }
    }
};

// Fonction pour g√©rer le bouton d'aide
const handlePanelHelp = async (interaction) => {
    const helpEmbed = {
        color: 0x5865F2,
        title: 'üìñ Guide d\'Utilisation - Serko',
        description: 'Voici comment utiliser le syst√®me de tickets Serko de mani√®re optimale.',
        fields: [
            {
                name: 'üöÄ D√©marrage Rapide',
                value: '‚Ä¢ **`!panel`** - Acc√©der √† la page d\'accueil\n‚Ä¢ **`!panel [ID_SERVEUR]`** - Panneau sp√©cifique\n‚Ä¢ **`/ticket setup`** - Configurer les tickets\n‚Ä¢ **`/deploy`** - D√©ployer les commandes',
                inline: false
            },
            {
                name: 'üé´ Gestion des Tickets',
                value: '‚Ä¢ **`/ticket create`** - Cr√©er un ticket\n‚Ä¢ **`/ticket ajouter @user`** - Ajouter un membre\n‚Ä¢ **`/ticket retirer @user`** - Retirer un membre\n‚Ä¢ **`/ticket stats`** - Voir les statistiques',
                inline: true
            },
            {
                name: '‚öôÔ∏è Configuration',
                value: '‚Ä¢ **`/config show`** - Voir la config\n‚Ä¢ **`/config category`** - D√©finir cat√©gorie\n‚Ä¢ **`/config logs`** - Salon de logs\n‚Ä¢ **`/config support`** - R√¥le support',
                inline: true
            },
            {
                name: 'üé® Personnalisation',
                value: '‚Ä¢ **`/embed`** - Cr√©er des embeds\n‚Ä¢ **`/panel admin`** - Panneau admin\n‚Ä¢ **`/panel roles`** - S√©lection de r√¥les\n‚Ä¢ **Interface web** - Cr√©ateur de panneaux',
                inline: false
            },
            {
                name: 'üîó Liens Utiles',
                value: '‚Ä¢ **Page d\'accueil** - Cliquez sur "Ouvrir le Panneau Serko"\n‚Ä¢ **Documentation** - Guide complet int√©gr√©\n‚Ä¢ **Support** - Cr√©ez un ticket pour obtenir de l\'aide',
                inline: false
            }
        ],
        footer: {
            text: 'Serko Help ‚Ä¢ Pour plus d\'aide, visitez le panneau web'
        },
        timestamp: new Date().toISOString()
    };

    await interaction.editReply({
        embeds: [helpEmbed]
    });
};

// Nouvelle fonction pour g√©rer la configuration depuis le panel
const handlePanelConfig = async (interaction) => {
    // V√©rifier les permissions
    const isMainAdmin = interaction.user.id === process.env.ADMIN_USER_ID;
    const hasAdminPerms = interaction.member.permissions.has('Administrator');
    
    if (!isMainAdmin && !hasAdminPerms) {
        return interaction.editReply({
            content: '‚ùå Vous devez √™tre administrateur pour acc√©der √† la configuration.'
        });
    }

    const config = getServerConfig(interaction.guild.id);
    const guild = interaction.guild;

    const configEmbed = {
        color: 0xF39C12,
        title: '‚öôÔ∏è Serko - Configuration du Syst√®me',
        description: 'Configurez les param√®tres du syst√®me de tickets pour ce serveur.',
        fields: [
            {
                name: 'üìÅ Cat√©gorie des Tickets',
                value: config.ticketCategoryId ? 
                    (guild.channels.cache.get(config.ticketCategoryId)?.name || '‚ùå Cat√©gorie introuvable') : 
                    '‚ö†Ô∏è Non configur√©e (cr√©ation automatique)',
                inline: true
            },
            {
                name: 'üìã Salon de Logs',
                value: config.logsChannelId ? 
                    `<#${config.logsChannelId}>` : 
                    '‚ö†Ô∏è Non configur√©',
                inline: true
            },
            {
                name: 'üìÑ Salon des Transcripts',
                value: config.transcriptChannelId ? 
                    `<#${config.transcriptChannelId}>` : 
                    '‚ö†Ô∏è Non configur√©',
                inline: true
            },
            {
                name: 'üõ°Ô∏è R√¥le de Support',
                value: config.supportRoleId ? 
                    `<@&${config.supportRoleId}>` : 
                    '‚ö†Ô∏è Non configur√© (d√©tection automatique)',
                inline: true
            }
        ],
        footer: {
            text: 'Serko Configuration ‚Ä¢ Utilisez les menus d√©roulants ci-dessous'
        },
        timestamp: new Date().toISOString()
    };

    // Cr√©er les menus de s√©lection pour chaque type de configuration
    const components = [
        {
            type: 1,
            components: [
                {
                    type: 3, // SELECT_MENU
                    custom_id: 'config_select_category',
                    placeholder: 'üìÅ Choisir une cat√©gorie pour les tickets',
                    options: guild.channels.cache
                        .filter(channel => channel.type === 4) // GUILD_CATEGORY
                        .map(category => ({
                            label: category.name,
                            value: category.id,
                            description: `Utiliser ${category.name} pour les tickets`
                        }))
                        .slice(0, 25) // Discord limite √† 25 options
                }
            ]
        },
        {
            type: 1,
            components: [
                {
                    type: 3, // SELECT_MENU
                    custom_id: 'config_select_logs',
                    placeholder: 'üìã Choisir un salon pour les logs',
                    options: guild.channels.cache
                        .filter(channel => channel.type === 0) // GUILD_TEXT
                        .map(channel => ({
                            label: `#${channel.name}`,
                            value: channel.id,
                            description: `Logs dans #${channel.name}`
                        }))
                        .slice(0, 25)
                }
            ]
        },
        {
            type: 1,
            components: [
                {
                    type: 3, // SELECT_MENU
                    custom_id: 'config_select_transcripts',
                    placeholder: 'üìÑ Choisir un salon pour les transcripts',
                    options: guild.channels.cache
                        .filter(channel => channel.type === 0) // GUILD_TEXT
                        .map(channel => ({
                            label: `#${channel.name}`,
                            value: channel.id,
                            description: `Transcripts dans #${channel.name}`
                        }))
                        .slice(0, 25)
                }
            ]
        },
        {
            type: 1,
            components: [
                {
                    type: 3, // SELECT_MENU
                    custom_id: 'config_select_support',
                    placeholder: 'üõ°Ô∏è Choisir un r√¥le de support',
                    options: guild.roles.cache
                        .filter(role => !role.managed && role.name !== '@everyone')
                        .map(role => ({
                            label: role.name,
                            value: role.id,
                            description: `R√¥le de support: ${role.name}`
                        }))
                        .slice(0, 25)
                }
            ]
        }
    ];

    await interaction.editReply({
        embeds: [configEmbed],
        components: components
    });
};

// Nouvelle fonction pour g√©rer les s√©lections de configuration
const handleConfigSelection = async (interaction) => {
    const { serverConfigs } = await import('../index.js');
    const configType = interaction.customId.replace('config_select_', '');
    const selectedValue = interaction.values[0];
    const guildId = interaction.guild.id;

    // Initialiser la config du serveur si elle n'existe pas
    if (!serverConfigs.has(guildId)) {
        serverConfigs.set(guildId, {});
    }

    const config = serverConfigs.get(guildId);
    const guild = interaction.guild;

    let successMessage = '';
    let selectedItem = '';

    switch (configType) {
        case 'category':
            const category = guild.channels.cache.get(selectedValue);
            config.ticketCategoryId = selectedValue;
            selectedItem = category.name;
            successMessage = `‚úÖ Cat√©gorie des tickets d√©finie sur **${selectedItem}**`;
            break;

        case 'logs':
            const logsChannel = guild.channels.cache.get(selectedValue);
            config.logsChannelId = selectedValue;
            selectedItem = `#${logsChannel.name}`;
            successMessage = `‚úÖ Salon de logs d√©fini sur ${logsChannel}`;
            break;

        case 'transcripts':
            const transcriptChannel = guild.channels.cache.get(selectedValue);
            config.transcriptChannelId = selectedValue;
            selectedItem = `#${transcriptChannel.name}`;
            successMessage = `‚úÖ Salon des transcripts d√©fini sur ${transcriptChannel}`;
            break;

        case 'support':
            const supportRole = guild.roles.cache.get(selectedValue);
            config.supportRoleId = selectedValue;
            selectedItem = supportRole.name;
            successMessage = `‚úÖ R√¥le de support d√©fini sur ${supportRole}`;
            break;
    }

    serverConfigs.set(guildId, config);

    const successEmbed = {
        color: 0x57F287,
        title: '‚úÖ Configuration Mise √† Jour',
        description: successMessage,
        footer: {
            text: 'Serko Configuration'
        },
        timestamp: new Date().toISOString()
    };

    await interaction.editReply({
        embeds: [successEmbed]
    });
};

// Nouvelle fonction pour g√©rer les statistiques depuis le panel
const handlePanelStats = async (interaction) => {
    const guild = interaction.guild;
    
    const statsEmbed = {
        color: 0x3498DB,
        title: 'üìä Serko - Statistiques du Syst√®me',
        description: `Statistiques en temps r√©el pour **${guild.name}**`,
        fields: [
            {
                name: 'üé´ Total des Tickets',
                value: ticketData.stats.totalTickets.toString(),
                inline: true
            },
            {
                name: 'üîì Tickets Ouverts',
                value: ticketData.stats.openTickets.toString(),
                inline: true
            },
            {
                name: 'üîí Tickets Ferm√©s',
                value: ticketData.stats.closedTickets.toString(),
                inline: true
            },
            {
                name: 'üë• Membres du Serveur',
                value: guild.memberCount.toString(),
                inline: true
            },
            {
                name: 'üí¨ Salons',
                value: guild.channels.cache.size.toString(),
                inline: true
            },
            {
                name: 'üé≠ R√¥les',
                value: guild.roles.cache.size.toString(),
                inline: true
            }
        ],
        footer: {
            text: 'Serko Statistics ‚Ä¢ Donn√©es en temps r√©el'
        },
        timestamp: new Date().toISOString()
    };

    await interaction.editReply({
        embeds: [statsEmbed]
    });
};

// Fonctions existantes pour les tickets...
const handleClaimTicket = async (interaction) => {
    const ticket = ticketData.tickets.get(interaction.channel.id);
    if (!ticket) {
        return interaction.editReply({ 
            content: '‚ùå Ce ticket n\'existe pas.'
        });
    }

    if (ticket.claimedBy) {
        return interaction.editReply({ 
            content: `‚ùå Ce ticket est d√©j√† claim par <@${ticket.claimedBy}>.`
        });
    }

    // V√©rifier et ajouter automatiquement les permissions support
    const config = getServerConfig(interaction.guild.id);
    await ensureSupportAccess(interaction.channel, interaction.guild, config);
    ticket.claimedBy = interaction.user.id;
    ticketData.tickets.set(interaction.channel.id, ticket);

    const claimEmbed = {
        color: 0x57F287,
        description: `‚úÖ ${interaction.user} a claim ce ticket.`,
        timestamp: new Date().toISOString()
    };

    await interaction.editReply({ embeds: [claimEmbed] });
    
    // Log dans le canal de logs si configur√©
    if (config.logsChannelId) {
        const logsChannel = interaction.guild.channels.cache.get(config.logsChannelId);
        if (logsChannel) {
            const logEmbed = {
                color: 0x57F287,
                title: 'üëã Ticket Claim',
                fields: [
                    { name: 'Ticket', value: `#${ticket.id} (<#${interaction.channel.id}>)`, inline: true },
                    { name: 'Claim par', value: `${interaction.user} (${interaction.user.tag})`, inline: true }
                ],
                timestamp: new Date().toISOString()
            };
            await logsChannel.send({ embeds: [logEmbed] });
        }
    }
    
    io.emit('ticketUpdated', ticket);
};

// Fonction utilitaire pour s'assurer que le support a acc√®s au ticket
const ensureSupportAccess = async (channel, guild, config) => {
    const { addSupportPermissions } = await import('../../api/index.js');
    await addSupportPermissions(channel, guild, config);
};

const handleCloseTicket = async (interaction) => {
    const ticket = ticketData.tickets.get(interaction.channel.id);
    if (!ticket) {
        return interaction.editReply({ 
            content: '‚ùå Ce ticket n\'existe pas dans notre syst√®me. V√©rifiez que ce canal est bien un ticket cr√©√© par Serko.'
        });
    }

    // V√©rifier si le ticket est d√©j√† ferm√©
    if (ticket.status === 'closed') {
        return interaction.editReply({ 
            content: '‚ùå Ce ticket est d√©j√† ferm√©.'
        });
    }

    // V√©rifier et ajouter automatiquement les permissions support avant fermeture
    const config = getServerConfig(interaction.guild.id);
    await ensureSupportAccess(interaction.channel, interaction.guild, config);
    // Cr√©er le transcript
    const messages = await interaction.channel.messages.fetch({ limit: 100 });
    const transcript = messages.reverse().map(msg => 
        `[${msg.createdAt.toLocaleString()}] ${msg.author.tag}: ${msg.content}`
    ).join('\n');

    // Mettre √† jour le ticket
    ticket.status = 'closed';
    ticket.closedAt = new Date().toISOString();
    ticket.closedBy = interaction.user.id;
    ticketData.tickets.set(interaction.channel.id, ticket);
    ticketData.stats.openTickets = Math.max(0, ticketData.stats.openTickets - 1);
    ticketData.stats.closedTickets++;

    const closeEmbed = {
        color: 0xED4245,
        title: 'üîí Ticket Ferm√©',
        description: `Ce ticket a √©t√© ferm√© par ${interaction.user}.`,
        timestamp: new Date().toISOString()
    };

    await interaction.editReply({
        embeds: [closeEmbed],
        components: [{
            type: 1,
            components: [
                {
                    type: 2,
                    style: 3,
                    label: 'R√©ouvrir',
                    custom_id: 'reopen_ticket'
                },
                {
                    type: 2,
                    style: 4,
                    label: 'Supprimer',
                    custom_id: 'delete_ticket'
                }
            ]
        }]
    });

    // Envoyer le transcript si configur√©
    if (config.transcriptChannelId) {
        const transcriptChannel = interaction.guild.channels.cache.get(config.transcriptChannelId);
        if (transcriptChannel) {
            const transcriptEmbed = {
                color: 0x5865F2,
                title: `üìã Transcript - Ticket #${ticket.id}`,
                fields: [
                    { name: 'Utilisateur', value: `<@${ticket.userId}>`, inline: true },
                    { name: 'Cat√©gorie', value: ticket.category, inline: true },
                    { name: 'Ferm√© par', value: `<@${interaction.user.id}>`, inline: true }
                ],
                timestamp: new Date().toISOString()
            };

            await transcriptChannel.send({
                embeds: [transcriptEmbed],
                files: [{
                    attachment: Buffer.from(transcript, 'utf8'),
                    name: `ticket-${ticket.id}-transcript.txt`
                }]
            });
        }
    }

    // Log dans le canal de logs si configur√©
    if (config.logsChannelId) {
        const logsChannel = interaction.guild.channels.cache.get(config.logsChannelId);
        if (logsChannel) {
            const logEmbed = {
                color: 0xED4245,
                title: 'üîí Ticket Ferm√©',
                fields: [
                    { name: 'Ticket', value: `#${ticket.id} (<#${interaction.channel.id}>)`, inline: true },
                    { name: 'Ferm√© par', value: `${interaction.user} (${interaction.user.tag})`, inline: true },
                    { name: 'Dur√©e', value: `${Math.round((Date.now() - new Date(ticket.createdAt).getTime()) / (1000 * 60))} minutes`, inline: true }
                ],
                timestamp: new Date().toISOString()
            };
            await logsChannel.send({ embeds: [logEmbed] });
        }
    }

    io.emit('ticketUpdated', ticket);
    io.emit('statsUpdated', ticketData.stats);
};

const handleReopenTicket = async (interaction) => {
    const ticket = ticketData.tickets.get(interaction.channel.id);
    if (!ticket) {
        return interaction.editReply({ 
            content: '‚ùå Ce ticket n\'existe pas.'
        });
    }

    // V√©rifier si le ticket est ferm√©
    if (ticket.status !== 'closed') {
        return interaction.editReply({ 
            content: '‚ùå Ce ticket n\'est pas ferm√©.'
        });
    }

    ticket.status = 'open';
    ticket.reopenedAt = new Date().toISOString();
    ticket.reopenedBy = interaction.user.id;
    delete ticket.closedAt;
    delete ticket.closedBy;
    ticketData.tickets.set(interaction.channel.id, ticket);
    ticketData.stats.openTickets++;
    ticketData.stats.closedTickets = Math.max(0, ticketData.stats.closedTickets - 1);

    const reopenEmbed = {
        color: 0x57F287,
        title: 'üîì Ticket R√©ouvert',
        description: `Ce ticket a √©t√© r√©ouvert par ${interaction.user}.`,
        timestamp: new Date().toISOString()
    };

    await interaction.editReply({
        embeds: [reopenEmbed],
        components: [{
            type: 1,
            components: [
                {
                    type: 2,
                    style: 3,
                    label: 'Claim',
                    custom_id: 'claim_ticket'
                },
                {
                    type: 2,
                    style: 4,
                    label: 'Fermer',
                    custom_id: 'close_ticket'
                }
            ]
        }]
    });

    // Log dans le canal de logs si configur√©
    const config = getServerConfig(interaction.guild.id);
    if (config.logsChannelId) {
        const logsChannel = interaction.guild.channels.cache.get(config.logsChannelId);
        if (logsChannel) {
            const logEmbed = {
                color: 0x57F287,
                title: 'üîì Ticket R√©ouvert',
                fields: [
                    { name: 'Ticket', value: `#${ticket.id} (<#${interaction.channel.id}>)`, inline: true },
                    { name: 'R√©ouvert par', value: `${interaction.user} (${interaction.user.tag})`, inline: true }
                ],
                timestamp: new Date().toISOString()
            };
            await logsChannel.send({ embeds: [logEmbed] });
        }
    }

    io.emit('ticketUpdated', ticket);
    io.emit('statsUpdated', ticketData.stats);
};

const handleDeleteTicket = async (interaction) => {
    const ticket = ticketData.tickets.get(interaction.channel.id);
    if (!ticket) {
        return interaction.editReply({ 
            content: '‚ùå Ce ticket n\'existe pas.'
        });
    }

    await interaction.editReply({ 
        content: 'üóëÔ∏è Ce ticket sera supprim√© dans 5 secondes...'
    });

    // Log dans le canal de logs si configur√©
    const config = getServerConfig(interaction.guild.id);
    if (config.logsChannelId) {
        const logsChannel = interaction.guild.channels.cache.get(config.logsChannelId);
        if (logsChannel) {
            const logEmbed = {
                color: 0xED4245,
                title: 'üóëÔ∏è Ticket Supprim√©',
                fields: [
                    { name: 'Ticket', value: `#${ticket.id}`, inline: true },
                    { name: 'Supprim√© par', value: `${interaction.user} (${interaction.user.tag})`, inline: true },
                    { name: 'Utilisateur', value: `<@${ticket.userId}>`, inline: true }
                ],
                timestamp: new Date().toISOString()
            };
            await logsChannel.send({ embeds: [logEmbed] });
        }
    }

    setTimeout(async () => {
        ticketData.tickets.delete(interaction.channel.id);
        io.emit('ticketDeleted', ticket);
        await interaction.channel.delete();
    }, 5000);
};

// Nouvelles fonctions pour les boutons personnalis√©s
const handleCustomEmbedButton = async (interaction) => {
    const buttonId = interaction.customId.replace('embed_', '');
    
    // Ici vous pouvez ajouter la logique pour chaque bouton personnalis√©
    // Par exemple, cr√©er des actions sp√©cifiques selon l'ID du bouton
    
    await interaction.editReply({
        content: `‚úÖ Bouton "${buttonId}" activ√© ! Vous pouvez personnaliser cette action dans le code.`
    });
};

const handleAdminButton = async (interaction) => {
    const action = interaction.customId.replace('admin_', '');
    
    // V√©rifier les permissions admin
    if (!interaction.member.permissions.has('Administrator')) {
        return interaction.editReply({
            content: '‚ùå Vous devez √™tre administrateur pour utiliser cette fonction.'
        });
    }

    switch (action) {
        case 'stats':
            const guild = interaction.guild;
            const statsEmbed = {
                color: 0x5865F2,
                title: 'üìä Statistiques du Serveur',
                fields: [
                    { name: 'üë• Membres', value: guild.memberCount.toString(), inline: true },
                    { name: 'üí¨ Salons', value: guild.channels.cache.size.toString(), inline: true },
                    { name: 'üé≠ R√¥les', value: guild.roles.cache.size.toString(), inline: true },
                    { name: 'üé´ Tickets Ouverts', value: ticketData.stats.openTickets.toString(), inline: true },
                    { name: 'üìã Total Tickets', value: ticketData.stats.totalTickets.toString(), inline: true }
                ],
                timestamp: new Date().toISOString()
            };
            await interaction.editReply({ embeds: [statsEmbed] });
            break;
            
        case 'config':
            await interaction.editReply({
                content: '‚öôÔ∏è Utilisez `/config show` pour voir la configuration actuelle ou `/config <option>` pour modifier.'
            });
            break;
            
        case 'logs':
            const config = getServerConfig(interaction.guild.id);
            if (config.logsChannelId) {
                const logsChannel = interaction.guild.channels.cache.get(config.logsChannelId);
                await interaction.editReply({
                    content: `üìã Canal de logs configur√©: ${logsChannel || '‚ùå Canal introuvable'}`
                });
            } else {
                await interaction.editReply({
                    content: 'üìã Aucun canal de logs configur√©. Utilisez `/config logs` pour en d√©finir un.'
                });
            }
            break;
            
        case 'backup':
            await interaction.editReply({
                content: 'üíæ Sauvegarde en cours de d√©veloppement...'
            });
            break;
            
        case 'maintenance':
            await interaction.editReply({
                content: '‚ö†Ô∏è Mode maintenance en cours de d√©veloppement...'
            });
            break;
    }
};

const handleInfoButton = async (interaction) => {
    const action = interaction.customId.replace('info_', '');
    
    switch (action) {
        case 'rules':
            await interaction.editReply({
                content: 'üìú Voici le r√®glement du serveur:\n\n1. Respectez tous les membres\n2. Pas de spam\n3. Utilisez les bons salons\n4. Suivez les ToS Discord'
            });
            break;
            
        case 'help':
            await interaction.editReply({
                content: '‚ùì **Aide disponible:**\n\n‚Ä¢ `/ticket` - Gestion des tickets\n‚Ä¢ `/embed` - Cr√©er des embeds\n‚Ä¢ `/panel` - Panneaux pr√©d√©finis\n‚Ä¢ `/config` - Configuration du bot\n‚Ä¢ `!panel` - Panneau interactif\n\nPour plus d\'aide, contactez un mod√©rateur.'
            });
            break;
            
        case 'contact':
            await interaction.editReply({
                content: 'üìß **Nous contacter:**\n\n‚Ä¢ Cr√©ez un ticket avec `/ticket create`\n‚Ä¢ Utilisez `!panel` pour le panneau interactif\n‚Ä¢ Mentionnez un mod√©rateur\n‚Ä¢ Envoyez un DM aux admins'
            });
            break;
    }
};

const handleSupportButton = async (interaction) => {
    const supportType = interaction.customId.replace('support_', '');
    
    // Cr√©er un ticket selon le type de support
    const categoryMap = {
        'priority': 'support',
        'technical': 'bug',
        'billing': 'payment',
        'general': 'support',
        'feedback': 'feature'
    };
    
    const category = categoryMap[supportType] || 'support';
    await interaction.client.createTicket(interaction, category);
};

const handleRoleButton = async (interaction) => {
    const roleType = interaction.customId.replace('role_', '');
    
    // Ici vous devriez configurer les IDs de r√¥les via /config ou les d√©tecter automatiquement
    const roleMap = {
        'notifications': 'notifications',
        'gaming': 'gaming',
        'creative': 'creative',
        'events': 'events',
        'dev': 'dev'
    };
    
    const roleName = roleMap[roleType];
    
    if (!roleName) {
        return interaction.editReply({
            content: '‚ùå Ce r√¥le n\'est pas configur√©.'
        });
    }
    
    // Chercher le r√¥le par nom (vous pouvez aussi ajouter une config pour les IDs)
    const role = interaction.guild.roles.cache.find(r => 
        r.name.toLowerCase().includes(roleName.toLowerCase())
    );
    
    if (!role) {
        return interaction.editReply({
            content: `‚ùå R√¥le "${roleName}" introuvable sur ce serveur.`
        });
    }
    
    const member = interaction.member;
    
    if (member.roles.cache.has(role.id)) {
        await member.roles.remove(role);
        await interaction.editReply({
            content: `‚úÖ R√¥le **${role.name}** retir√© !`
        });
    } else {
        await member.roles.add(role);
        await interaction.editReply({
            content: `‚úÖ R√¥le **${role.name}** ajout√© !`
        });
    }
};