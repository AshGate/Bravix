export default {
    name: 'messageCreate',
    execute: async (message) => {
        // Ignorer les messages des bots
        if (message.author.bot) return;

        // Ignorer les messages qui ne sont pas des commandes !panel
        if (!message.content.toLowerCase().startsWith('!panel')) return;

        const content = message.content.toLowerCase().trim();
        
        // V√©rifier si c'est exactement !panel (sans arguments)
        if (content === '!panel') {
            console.log(`üì± Commande !panel re√ßue de ${message.author.tag} dans ${message.guild?.name || 'DM'}`);
            await handlePanelCommand(message);
            return;
        }
        
        // V√©rifier si c'est !panel avec un ID de serveur
        const parts = message.content.trim().split(/\s+/);
        if (parts.length === 2 && parts[0].toLowerCase() === '!panel') {
            const guildId = parts[1];
            console.log(`üì± Commande !panel avec guild ID re√ßue: ${guildId} de ${message.author.tag} dans ${message.guild?.name || 'DM'}`);
            await handlePanelWithGuildId(message, guildId);
            return;
        }
    }
};

const handlePanelCommand = async (message) => {
    console.log(`üîß Traitement de la commande !panel pour ${message.author.tag}`);
    
    // V√©rifier si on a d√©j√† trait√© cette commande r√©cemment (protection anti-spam)
    const userId = message.author.id;
    const channelId = message.channel.id;
    const messageId = message.id;
    const now = Date.now();
    
    // Cache global pour √©viter les doublons (expire apr√®s 10 secondes)
    if (!global.panelCommandCache) {
        global.panelCommandCache = new Map();
    }
    
    // Cl√© unique bas√©e sur l'utilisateur, le canal et l'heure
    const cacheKey = `${userId}_${channelId}_panel`;
    const lastCommand = global.panelCommandCache.get(cacheKey);
    
    if (lastCommand && (now - lastCommand.timestamp) < 10000) {
        console.log(`‚ö†Ô∏è Commande !panel ignor√©e (d√©j√† trait√©e r√©cemment) pour ${message.author.tag}`);
        return;
    }
    
    // Marquer cette commande comme trait√©e
    global.panelCommandCache.set(cacheKey, {
        timestamp: now,
        messageId: messageId,
        processed: true
    });
    
    // Nettoyer le cache p√©riodiquement
    setTimeout(() => {
        global.panelCommandCache.delete(cacheKey);
    }, 15000);
    
    console.log('‚è≥ Message de commande laiss√© visible pendant 5 secondes...');

    // G√©n√©rer le lien vers le panel Serko
    const panelUrl = getRailwayUrl();

    const panelEmbed = {
        color: 0x5865F2,
        title: 'üéõÔ∏è Panel Serko - Syst√®me de Tickets Discord',
        description: '**Acc√©dez au panel de gestion complet !**\n\nüîê **Mot de passe requis pour l\'authentification**\n\nüéØ **Cliquez sur le lien ci-dessous puis entrez le mot de passe**',
        fields: [
            {
                name: 'üöÄ Fonctionnalit√©s Principales',
                value: '‚Ä¢ **Cr√©ation de tickets** avec embeds personnalis√©s\n‚Ä¢ **Gestion des participants** avec ID Discord\n‚Ä¢ **Fermeture de tickets** depuis le panel\n‚Ä¢ **Lecture en temps r√©el** des tickets\n‚Ä¢ **Configuration compl√®te** du syst√®me',
                inline: false
            },
            {
                name: 'üîê Authentification S√©curis√©e',
                value: '‚Ä¢ **Mot de passe fixe** : `SerkoAdmin2024!@$`\n‚Ä¢ **Acc√®s prot√©g√©** au panel\n‚Ä¢ **Interface s√©curis√©e**\n‚Ä¢ **Gestion administrative**',
                inline: true
            },
            {
                name: '‚ö° Actions Disponibles',
                value: '‚Ä¢ **Cr√©er des panneaux** de tickets\n‚Ä¢ **Ajouter/Retirer** des utilisateurs\n‚Ä¢ **Fermer des tickets** directement\n‚Ä¢ **Voir les statistiques** temps r√©el',
                inline: true
            }
        ],
        footer: {
            text: 'Panel Serko ‚Ä¢ Authentification par Mot de Passe'
        },
        timestamp: new Date().toISOString()
    };

    // Utiliser la structure correcte pour les boutons Discord
    const components = [
        {
            type: 1, // ACTION_ROW
            components: [
                {
                    type: 2, // BUTTON
                    style: 5, // Link button
                    label: 'Ouvrir le Panel Serko',
                    emoji: { name: 'üéõÔ∏è' },
                    url: panelUrl
                },
                {
                    type: 2, // BUTTON
                    style: 1, // Primary
                    label: 'Support Rapide',
                    emoji: { name: 'üéÆ' },
                    custom_id: 'panel_ticket_support'
                },
                {
                    type: 2, // BUTTON
                    style: 2, // Secondary
                    label: 'Guide d\'Utilisation',
                    emoji: { name: 'üìñ' },
                    custom_id: 'panel_help'
                }
            ]
        }
    ];

    try {
        const sentMessage = await message.channel.send({
            embeds: [panelEmbed],
            components: components
        });
        
        // Stocker l'ID du message envoy√© pour √©viter les doublons
        global.panelCommandCache.set(`${cacheKey}_sent`, {
            timestamp: now,
            messageId: sentMessage.id
        });
        
        console.log('‚úÖ Message de panel Serko envoy√© avec mot de passe');

        // Supprimer le message de commande APR√àS 5 secondes
        setTimeout(async () => {
            try {
                await message.delete();
                console.log('‚úÖ Message de commande supprim√© apr√®s 5 secondes');
            } catch (error) {
                console.log('‚ö†Ô∏è Impossible de supprimer le message de commande:', error.message);
            }
        }, 5000);
        
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi du message de panel:', error);
    }
};

const handlePanelWithGuildId = async (message, guildId) => {
    console.log(`üîß Traitement de la commande !panel avec guild ID: ${guildId}`);
    
    // V√©rifier si on a d√©j√† trait√© cette commande r√©cemment (protection anti-spam)
    const userId = message.author.id;
    const channelId = message.channel.id;
    const messageId = message.id;
    const now = Date.now();
    
    // Cache global pour √©viter les doublons
    if (!global.panelGuildCommandCache) {
        global.panelGuildCommandCache = new Map();
    }
    
    // Cl√© unique bas√©e sur l'utilisateur, le canal, le guild et l'heure
    const cacheKey = `${userId}_${channelId}_${guildId}`;
    const lastCommand = global.panelGuildCommandCache.get(cacheKey);
    
    if (lastCommand && (now - lastCommand.timestamp) < 10000) {
        console.log(`‚ö†Ô∏è Commande !panel ${guildId} ignor√©e (d√©j√† trait√©e r√©cemment) pour ${message.author.tag}`);
        return;
    }
    
    // Marquer cette commande comme trait√©e
    global.panelGuildCommandCache.set(cacheKey, {
        timestamp: now,
        messageId: messageId,
        guildId: guildId,
        processed: true
    });
    
    // Nettoyer le cache p√©riodiquement
    setTimeout(() => {
        global.panelGuildCommandCache.delete(cacheKey);
    }, 15000);
    
    console.log('‚è≥ Message de commande laiss√© visible pendant 3 secondes...');

    // V√©rifier si l'ID est valide (18-19 chiffres)
    if (!/^\d{17,19}$/.test(guildId)) {
        console.log(`‚ùå ID de serveur invalide: ${guildId}`);
        const errorEmbed = {
            color: 0xED4245,
            title: '‚ùå ID de Serveur Invalide',
            description: 'L\'ID du serveur Discord doit √™tre compos√© de 17 √† 19 chiffres.',
            fields: [
                {
                    name: 'üìù Format Correct',
                    value: '```!panel 123456789012345678```',
                    inline: false
                },
                {
                    name: 'üîç Comment obtenir l\'ID',
                    value: '1. Activez le mode d√©veloppeur\n2. Clic droit sur le serveur\n3. "Copier l\'ID du serveur"',
                    inline: false
                }
            ],
            footer: {
                text: 'Panel Serko ‚Ä¢ Veuillez r√©essayer avec un ID valide'
            }
        };

        try {
            await message.channel.send({ embeds: [errorEmbed] });
            console.log('‚úÖ Message d\'erreur envoy√© pour ID invalide');
            
            // Supprimer le message de commande apr√®s 3 secondes
            setTimeout(async () => {
                try {
                    await message.delete();
                    console.log('‚úÖ Message de commande invalide supprim√©');
                } catch (error) {
                    console.log('‚ö†Ô∏è Impossible de supprimer le message:', error.message);
                }
            }, 3000);
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'envoi du message d\'erreur:', error);
        }
        return;
    }

    // Forcer le rafra√Æchissement du cache des guildes
    console.log(`üîÑ Rafra√Æchissement du cache des guildes...`);
    try {
        await message.client.guilds.fetch();
        console.log(`‚úÖ Cache des guildes rafra√Æchi. Guildes disponibles: ${message.client.guilds.cache.size}`);
        
        // Lister toutes les guildes pour debug
        message.client.guilds.cache.forEach(guild => {
            console.log(`   - ${guild.name} (${guild.id})`);
        });
    } catch (error) {
        console.error('‚ùå Erreur lors du rafra√Æchissement du cache:', error);
    }

    // V√©rifier si le bot a acc√®s √† ce serveur
    const guild = message.client.guilds.cache.get(guildId);
    if (!guild) {
        console.log(`‚ùå Serveur non trouv√© apr√®s rafra√Æchissement: ${guildId}`);
        
        // Essayer de fetch le serveur sp√©cifiquement
        try {
            console.log(`üîç Tentative de fetch direct du serveur ${guildId}...`);
            const fetchedGuild = await message.client.guilds.fetch(guildId);
            console.log(`‚úÖ Serveur trouv√© via fetch direct: ${fetchedGuild.name}`);
            
            // Continuer avec le serveur fetch√©
            await processPanelAccess(message, fetchedGuild, guildId);
            return;
        } catch (fetchError) {
            console.log(`‚ùå Impossible de fetch le serveur ${guildId}:`, fetchError.message);
        }
        
        const notFoundEmbed = {
            color: 0xED4245,
            title: '‚ùå Serveur Non Trouv√©',
            description: `Le bot n'a pas acc√®s au serveur avec l'ID \`${guildId}\` ou ce serveur n'existe pas.`,
            fields: [
                {
                    name: 'üîç V√©rifications',
                    value: '‚Ä¢ Le bot est-il pr√©sent sur ce serveur ?\n‚Ä¢ L\'ID est-il correct ?\n‚Ä¢ Le serveur existe-t-il toujours ?',
                    inline: false
                },
                {
                    name: 'üí° Solution',
                    value: `Assurez-vous que le bot est invit√© sur le serveur et que l\'ID est correct.\n\n**Serveurs o√π le bot est pr√©sent :**\n${message.client.guilds.cache.map(g => `‚Ä¢ ${g.name} (\`${g.id}\`)`).join('\n') || 'Aucun serveur trouv√©'}`,
                    inline: false
                }
            ],
            footer: {
                text: 'Panel Serko ‚Ä¢ V√©rifiez l\'ID du serveur'
            }
        };

        try {
            await message.channel.send({ embeds: [notFoundEmbed] });
            console.log('‚úÖ Message d\'erreur envoy√© pour serveur non trouv√©');
            
            // Supprimer le message de commande apr√®s 3 secondes
            setTimeout(async () => {
                try {
                    await message.delete();
                    console.log('‚úÖ Message de commande supprim√©');
                } catch (error) {
                    console.log('‚ö†Ô∏è Impossible de supprimer le message:', error.message);
                }
            }, 3000);
        } catch (error) {
            console.error('‚ùå Erreur lors de l\'envoi du message d\'erreur:', error);
        }
        return;
    }

    await processPanelAccess(message, guild, guildId);
};

const processPanelAccess = async (message, guild, guildId) => {
    // G√©n√©rer l'URL Railway correcte
    const panelUrl = `${getRailwayUrl()}/?guild=${guildId}`;
    
    console.log(`‚úÖ Acc√®s autoris√© pour ${message.author.tag} sur ${guild.name}`);
    console.log(`üîó URL Panel g√©n√©r√©e: ${panelUrl}`);
    
    const successEmbed = {
        color: 0x57F287,
        title: 'üéõÔ∏è Acc√®s au Panel Serko',
        description: `**Serveur :** ${guild.name}\n**Membres :** ${guild.memberCount}\n\nüîê **Mot de passe requis pour l\'authentification**\n\nüéØ **Cliquez sur le lien puis entrez le mot de passe !**`,
        fields: [
            {
                name: 'üîó Lien d\'Acc√®s Direct',
                value: `[**üéõÔ∏è Ouvrir le Panel Serko pour ${guild.name}**](${panelUrl})\n*Panel pr√©-configur√© pour ce serveur*`,
                inline: false
            },
            {
                name: 'üîê Authentification S√©curis√©e',
                value: '‚Ä¢ **Mot de passe** : `SerkoAdmin2024!@$`\n‚Ä¢ **Acc√®s prot√©g√©** au panel\n‚Ä¢ **Interface s√©curis√©e**\n‚Ä¢ **Gestion administrative**',
                inline: true
            },
            {
                name: '‚ö° Fonctionnalit√©s Disponibles',
                value: '‚Ä¢ **Cr√©er des embeds** de tickets\n‚Ä¢ **Ajouter/Retirer** des utilisateurs\n‚Ä¢ **Fermer des tickets** directement\n‚Ä¢ **Voir les tickets** en temps r√©el',
                inline: true
            }
        ],
        footer: {
            text: `Panel Serko ‚Ä¢ Gestion S√©curis√©e pour ${guild.name}`
        },
        timestamp: new Date().toISOString()
    };

    // Structure correcte des boutons Discord
    const components = [
        {
            type: 1, // ACTION_ROW
            components: [
                {
                    type: 2, // BUTTON
                    style: 5, // Link button
                    label: `üéõÔ∏è Panel Serko - ${guild.name}`,
                    emoji: { name: 'üöÄ' },
                    url: panelUrl
                },
                {
                    type: 2, // BUTTON
                    style: 1, // Primary
                    label: 'Cr√©er un Ticket',
                    emoji: { name: 'üé´' },
                    custom_id: 'panel_ticket_support'
                },
                {
                    type: 2, // BUTTON
                    style: 2, // Secondary
                    label: 'Statistiques',
                    emoji: { name: 'üìä' },
                    custom_id: 'panel_stats'
                }
            ]
        }
    ];

    try {
        const sentMessage = await message.channel.send({
            embeds: [successEmbed],
            components: components
        });
        
        console.log('‚úÖ Message de succ√®s envoy√© avec lien vers le Panel et mot de passe');
        console.log(`üéõÔ∏è URL finale: ${panelUrl}`);

        // Supprimer le message de commande APR√àS 3 secondes
        setTimeout(async () => {
            try {
                await message.delete();
                console.log('‚úÖ Message de commande supprim√© apr√®s 3 secondes');
            } catch (error) {
                console.log('‚ö†Ô∏è Impossible de supprimer le message de commande:', error.message);
            }
        }, 3000);
    } catch (error) {
        console.error('‚ùå Erreur lors de l\'envoi du message de succ√®s:', error);
    }
};

const getRailwayUrl = () => {
    // Essayer diff√©rentes variables d'environnement Railway
    if (process.env.RAILWAY_STATIC_URL) {
        return process.env.RAILWAY_STATIC_URL;
    }
    if (process.env.RAILWAY_PUBLIC_DOMAIN) {
        return `https://${process.env.RAILWAY_PUBLIC_DOMAIN}`;
    }
    // URL par d√©faut
    return 'http://localhost:3001';
};