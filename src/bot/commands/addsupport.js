import { SlashCommandBuilder } from 'discord.js';

export default {
    data: new SlashCommandBuilder()
        .setName('addsupport')
        .setDescription('Ajouter ou retirer un r√¥le support qui aura acc√®s √† tous les tickets')
        .addSubcommand(subcommand =>
            subcommand
                .setName('add')
                .setDescription('Ajouter un r√¥le support')
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('Le r√¥le √† ajouter comme support')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('remove')
                .setDescription('Retirer un r√¥le support')
                .addRoleOption(option =>
                    option.setName('role')
                        .setDescription('Le r√¥le √† retirer du support')
                        .setRequired(true)))
        .addSubcommand(subcommand =>
            subcommand
                .setName('list')
                .setDescription('Voir la liste des r√¥les support'))
        .addSubcommand(subcommand =>
            subcommand
                .setName('clear')
                .setDescription('Supprimer tous les r√¥les support')),

    execute: async (interaction) => {
        // V√©rifier les permissions (Admin principal ou permissions serveur)
        const isMainAdmin = interaction.user.id === process.env.ADMIN_USER_ID;
        const hasAdminPerms = interaction.member.permissions.has('Administrator');
        
        if (!isMainAdmin && !hasAdminPerms) {
            return interaction.reply({
                content: '‚ùå Vous devez √™tre administrateur pour utiliser cette commande.',
                ephemeral: true
            });
        }

        const { getServerConfig, serverConfigs } = await import('../../api/index.js');
        const subcommand = interaction.options.getSubcommand();
        const guildId = interaction.guild.id;
        const config = getServerConfig(guildId);

        // Initialiser la liste des r√¥les support si elle n'existe pas
        if (!config.supportRoles) {
            config.supportRoles = [];
        }

        switch (subcommand) {
            case 'add':
                await handleAddSupport(interaction, config, serverConfigs, guildId);
                break;
            case 'remove':
                await handleRemoveSupport(interaction, config, serverConfigs, guildId);
                break;
            case 'list':
                await handleListSupport(interaction, config);
                break;
            case 'clear':
                await handleClearSupport(interaction, config, serverConfigs, guildId);
                break;
        }
    }
};

const handleAddSupport = async (interaction, config, serverConfigs, guildId) => {
    const role = interaction.options.getRole('role');
    
    // Importer la constante du r√¥le automatique
    const { AUTO_SUPPORT_ROLE_ID } = await import('../../api/index.js');
    
    if (config.supportRoles.includes(role.id)) {
        return interaction.reply({
            embeds: [{
                color: 0xED4245,
                title: '‚ùå R√¥le D√©j√† Ajout√©',
                description: role.id === AUTO_SUPPORT_ROLE_ID ? 
                    `Le r√¥le ${role} est le r√¥le support automatique du syst√®me.` :
                    `Le r√¥le ${role} est d√©j√† dans la liste des r√¥les support.`,
                timestamp: new Date().toISOString()
            }],
            ephemeral: true
        });
    }

    config.supportRoles.push(role.id);
    serverConfigs.set(guildId, config);

    // Ajouter le r√¥le √† tous les tickets existants
    const { ticketData } = await import('../../api/index.js');
    const guild = interaction.guild;
    let ticketsUpdated = 0;

    for (const [channelId, ticket] of ticketData.tickets) {
        if (ticket.guildId === guildId && ticket.status === 'open') {
            try {
                const channel = guild.channels.cache.get(channelId);
                if (channel) {
                    await channel.permissionOverwrites.edit(role.id, {
                        ViewChannel: true,
                        SendMessages: true,
                        ReadMessageHistory: true,
                        AttachFiles: true,
                        ManageMessages: true
                    });
                    ticketsUpdated++;
                }
            } catch (error) {
                console.error(`‚ùå Erreur lors de l'ajout du r√¥le ${role.name} au ticket ${channelId}:`, error);
            }
        }
    }

    await interaction.reply({
        embeds: [{
            color: 0x57F287,
            title: '‚úÖ R√¥le Support Ajout√©',
            description: `Le r√¥le ${role} a √©t√© ajout√© √† la liste des r√¥les support.`,
            fields: [
                {
                    name: 'üìä Tickets Mis √† Jour',
                    value: `${ticketsUpdated} tickets existants ont √©t√© mis √† jour avec les nouvelles permissions.`,
                    inline: false
                },
                {
                    name: 'üîß Type de R√¥le',
                    value: role.id === AUTO_SUPPORT_ROLE_ID ? 
                        'ü§ñ R√¥le support automatique du syst√®me' : 
                        'üë§ R√¥le support ajout√© manuellement',
                    inline: false
                },
                {
                    name: 'üîß Permissions Accord√©es',
                    value: '‚Ä¢ Voir les tickets\n‚Ä¢ Envoyer des messages\n‚Ä¢ Lire l\'historique\n‚Ä¢ Joindre des fichiers\n‚Ä¢ G√©rer les messages',
                    inline: false
                }
            ],
            timestamp: new Date().toISOString()
        }]
    });

    console.log(`‚úÖ R√¥le support ajout√©: ${role.name} (${role.id}) pour ${guild.name}`);
    console.log(`üìä ${ticketsUpdated} tickets mis √† jour avec les nouvelles permissions`);
};

const handleRemoveSupport = async (interaction, config, serverConfigs, guildId) => {
    const role = interaction.options.getRole('role');
    
    if (!config.supportRoles.includes(role.id)) {
        return interaction.reply({
            embeds: [{
                color: 0xED4245,
                title: '‚ùå R√¥le Non Trouv√©',
                description: `Le r√¥le ${role} n'est pas dans la liste des r√¥les support.`,
                timestamp: new Date().toISOString()
            }],
            ephemeral: true
        });
    }

    config.supportRoles = config.supportRoles.filter(roleId => roleId !== role.id);
    serverConfigs.set(guildId, config);

    // Retirer le r√¥le de tous les tickets existants (optionnel)
    const { ticketData } = await import('../../api/index.js');
    const guild = interaction.guild;
    let ticketsUpdated = 0;

    for (const [channelId, ticket] of ticketData.tickets) {
        if (ticket.guildId === guildId && ticket.status === 'open') {
            try {
                const channel = guild.channels.cache.get(channelId);
                if (channel) {
                    await channel.permissionOverwrites.delete(role.id);
                    ticketsUpdated++;
                }
            } catch (error) {
                console.error(`‚ùå Erreur lors du retrait du r√¥le ${role.name} du ticket ${channelId}:`, error);
            }
        }
    }

    await interaction.reply({
        embeds: [{
            color: 0xED4245,
            title: '‚úÖ R√¥le Support Retir√©',
            description: `Le r√¥le ${role} a √©t√© retir√© de la liste des r√¥les support.`,
            fields: [
                {
                    name: 'üìä Tickets Mis √† Jour',
                    value: `${ticketsUpdated} tickets existants ont √©t√© mis √† jour (permissions retir√©es).`,
                    inline: false
                }
            ],
            timestamp: new Date().toISOString()
        }]
    });

    console.log(`‚úÖ R√¥le support retir√©: ${role.name} (${role.id}) pour ${guild.name}`);
};

const handleListSupport = async (interaction, config) => {
    const guild = interaction.guild;
    
    // Importer la constante du r√¥le automatique
    const { AUTO_SUPPORT_ROLE_ID } = await import('../../api/index.js');
    
    if (!config.supportRoles || config.supportRoles.length === 0) {
        return interaction.reply({
            embeds: [{
                color: 0xF39C12,
                title: 'üìã R√¥les Support',
                description: 'Aucun r√¥le support configur√©.\n\nUtilisez `/addsupport add @role` pour ajouter un r√¥le.',
                timestamp: new Date().toISOString()
            }],
            ephemeral: true
        });
    }

    const supportRolesList = config.supportRoles
        .map(roleId => {
            const role = guild.roles.cache.get(roleId);
            if (role) {
                const roleType = roleId === AUTO_SUPPORT_ROLE_ID ? ' ü§ñ (Automatique)' : ' üë§ (Manuel)';
                return `‚Ä¢ ${role} (${role.name})${roleType}`;
            } else {
                return `‚Ä¢ ‚ùå R√¥le introuvable (${roleId})`;
            }
        })
        .join('\n');

    await interaction.reply({
        embeds: [{
            color: 0x5865F2,
            title: 'üìã R√¥les Support Configur√©s',
            description: `**${config.supportRoles.length}** r√¥le(s) support configur√©(s) :\n\n${supportRolesList}`,
            fields: [
                {
                    name: 'üîß Permissions Accord√©es',
                    value: '‚Ä¢ Acc√®s √† tous les tickets\n‚Ä¢ Envoyer des messages\n‚Ä¢ G√©rer les messages\n‚Ä¢ Joindre des fichiers',
                    inline: false
                }
            ],
            footer: {
                text: 'Ces r√¥les ont automatiquement acc√®s √† tous les nouveaux tickets'
            },
            timestamp: new Date().toISOString()
        }],
        ephemeral: true
    });
};

const handleClearSupport = async (interaction, config, serverConfigs, guildId) => {
    if (!config.supportRoles || config.supportRoles.length === 0) {
        return interaction.reply({
            embeds: [{
                color: 0xF39C12,
                title: '‚ö†Ô∏è Aucun R√¥le √† Supprimer',
                description: 'Il n\'y a aucun r√¥le support configur√© √† supprimer.',
                timestamp: new Date().toISOString()
            }],
            ephemeral: true
        });
    }

    const roleCount = config.supportRoles.length;
    config.supportRoles = [];
    serverConfigs.set(guildId, config);

    await interaction.reply({
        embeds: [{
            color: 0xED4245,
            title: 'üóëÔ∏è R√¥les Support Supprim√©s',
            description: `Tous les r√¥les support (${roleCount}) ont √©t√© supprim√©s de la configuration.`,
            fields: [
                {
                    name: '‚ö†Ô∏è Important',
                    value: 'Les permissions des tickets existants ne sont pas automatiquement retir√©es. Utilisez `/addsupport remove` pour retirer les permissions individuellement si n√©cessaire.',
                    inline: false
                }
            ],
            timestamp: new Date().toISOString()
        }]
    });

    console.log(`üóëÔ∏è Tous les r√¥les support supprim√©s pour ${interaction.guild.name} (${roleCount} r√¥les)`);
};